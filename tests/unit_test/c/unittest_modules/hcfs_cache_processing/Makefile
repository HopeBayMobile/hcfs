# A sample Makefile for building Google Test and using it in user
# tests. Please tweak it to suit your environment and project. You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
# make [all] - makes everything.
# make TARGET - makes the given target.
# make clean - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = ../../gtest-1.7.0

# Where to find user code.
USER_DIR = $(realpath ../../../../../src/HCFS)

# Location for unittest code
UNITTEST_DIR = $(realpath ./unittests)

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include -iquote$(USER_DIR) $(EXTRACPPFLAGS)

# Flags passed to C and C++ compilers
CPPFLAGS += -g -Wall -Wextra -pthread -fprofile-arcs \
	    -D_FILE_OFFSET_BITS=64 \
	    -DDEDUP_ENABLE=0 \
	    -DENCRYPT_ENABLE=1 \
	    -DCOMPRESS_ENABLE=0 \
	    -DARM_32bit_ \
	    -D_ANDROID_ENV_
# Flags passed to the C compiler. (We trace coverage of hcfs source only)
CFLAGS += -ftest-coverage
CFAKEFLAGS +=
# Flags passed to the C++ compiler.
CXXFLAGS +=
# gcc will compile: *.c/*.cpp files as C and C++ respectively.
CXX = gcc

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = hcfs_cachebuild_unittest hcfs_cacheops_unittest

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all : setup $(TESTS)

clean :
	rm -rf $(TESTS) gtest.a gtest_main.a *.o *.gcda *.gcov *.gcno

test : setup $(TESTS)
	./hcfs_cachebuild_unittest
	./hcfs_cacheops_unittest
	gcovr -r $(USER_DIR) .

.PHONY : setup
setup :
	@$(USER_DIR)/../../utils/setup_dev_env.sh -m unit_test

export PATH := /usr/lib/ccache:$(PATH)
export USE_CCACHE := 1

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized. This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
	$(GTEST_DIR)/src/gtest-all.cc -lstdc++

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
	$(GTEST_DIR)/src/gtest_main.cc -lstdc++

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test. A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.



# hcfs_cachebuild testing

hcfs_cachebuild.o : $(USER_DIR)/hcfs_cachebuild.c $(USER_DIR)/params.h \
		$(USER_DIR)/fuseop.h $(USER_DIR)/super_block.h $(USER_DIR)/hcfs_cachebuild.h \
		$(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CFLAGS) -c $(USER_DIR)/hcfs_cachebuild.c

hcfs_cachebuild_unittest.o : $(UNITTEST_DIR)/hcfs_cachebuild_unittest.cc \
		$(USER_DIR)/hcfs_cachebuild.h $(USER_DIR)/hcfs_cachebuild.c $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(UNITTEST_DIR)/hcfs_cachebuild_unittest.cc

cachebuild_mock_function.o : $(UNITTEST_DIR)/cachebuild_mock_function.c $(UNITTEST_DIR)/mock_params.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(UNITTEST_DIR)/cachebuild_mock_function.c

hcfs_cachebuild_unittest : cachebuild_mock_function.o hcfs_cachebuild.o hcfs_cachebuild_unittest.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@ -lstdc++



# hcfs_cacheops testing

hcfs_cacheops.o : $(USER_DIR)/hcfs_cacheops.c $(USER_DIR)/hcfs_cachebuild.h \
		$(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CFLAGS) -c $(USER_DIR)/hcfs_cacheops.c
	
hcfs_cacheops_unittest.o : $(UNITTEST_DIR)/hcfs_cacheops_unittest.cc \
		$(USER_DIR)/hcfs_cacheops.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(UNITTEST_DIR)/hcfs_cacheops_unittest.cc

cacheops_mock_function.o : $(UNITTEST_DIR)/cacheops_mock_function.c $(UNITTEST_DIR)/mock_params.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(UNITTEST_DIR)/cacheops_mock_function.c

hcfs_cacheops_unittest : hcfs_cacheops_unittest.o hcfs_cacheops.o cacheops_mock_function.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@ -lstdc++




