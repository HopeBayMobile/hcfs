# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = ../../gtest-1.7.0

# Where to find user code.
USER_DIR = $(realpath ../../../../../src/HCFS)

# Location for unittest code
UNITTEST_DIR = $(realpath ./unittests)

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include -iquote$(USER_DIR) $(EXTRACPPFLAGS)

# Flags passed to C and C++ compilers
CPPFLAGS += -g -Wall -Wextra -pthread -fprofile-arcs \
	    -D_FILE_OFFSET_BITS=64 \
	    -DDEDUP_ENABLE=0 \
	    -DENCRYPT_ENABLE=1 \
	    -DCOMPRESS_ENABLE=0 \
	    -DARM_32bit_ \
	    -D_ANDROID_ENV_
# Flags passed to the C compiler. (We trace coverage of hcfs source only)
CFLAGS += -ftest-coverage
CFAKEFLAGS +=
# Flags passed to the C++ compiler.
CXXFLAGS +=
# gcc will compile: *.c/*.cpp files as C and C++ respectively.
CXX = gcc
GCC_VERSION_GE_50 := $(shell expr `gcc -dumpversion | cut -f1-2 -d.` \>= 4.9)
ifeq "$(GCC_VERSION_GE_49)" "1"
	CPPFLAGS += -fdiagnostics-color
endif

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = utils_unittest dir_entry_btree_unittest logger_unittest \
	pkg_cache_unittest syncpoint_control_unittest

.PHONY: $(DO_TESTS)
DO_TESTS = $(TESTS:%=test-%)

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all : setup $(TESTS)

clean :
	rm -rf $(TESTS) gtest.a gtest_main.a *.o *.gcda *.gcov *.gcno

test : setup $(DO_TESTS)
ifndef NOGCOVR
	gcovr -r $(USER_DIR) .
endif

$(DO_TESTS): $(TESTS)
	./$(@:test-%=%) --gtest_output=xml:test_detail_$(@:test-%=%).xml

.PHONY : setup
setup :
	@$(USER_DIR)/../../utils/setup_dev_env.sh -m unit_test

export PATH := /usr/lib/ccache:$(PATH)
export USE_CCACHE := 1

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc -lstdc++

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc -lstdc++

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

# unittest for utils.c

utils.o : $(USER_DIR)/utils.c $(USER_DIR)/hfuse_system.h $(USER_DIR)/params.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CFLAGS) -c $(USER_DIR)/utils.c

utils_fakeftn.o : $(UNITTEST_DIR)/utils_fakeftn.c 
	$(CXX) $(CPPFLAGS) $(CFAKEFLAGS) -c $(UNITTEST_DIR)/utils_fakeftn.c

utils_unittest.o : $(UNITTEST_DIR)/utils_unittest.cc \
                     $(USER_DIR)/utils.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(UNITTEST_DIR)/utils_unittest.cc

utils_unittest : utils.o utils_fakeftn.o utils_unittest.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@ -lstdc++

# unittest for dir_entry_btree.c

dir_entry_btree_fakeftn.o : $(UNITTEST_DIR)/dir_entry_btree_fakeftn.c
	$(CXX) $(CPPFLAGS) $(CFAKEFLAGS) -c $(UNITTEST_DIR)/dir_entry_btree_fakeftn.c

dir_entry_btree.o : $(USER_DIR)/dir_entry_btree.c $(USER_DIR)/dir_entry_btree.h \
		$(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CFLAGS) -c $(USER_DIR)/dir_entry_btree.c

dir_entry_btree_unittest.o : $(UNITTEST_DIR)/dir_entry_btree_unittest.cc \
		$(USER_DIR)/dir_entry_btree.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(UNITTEST_DIR)/dir_entry_btree_unittest.cc

dir_entry_btree_unittest : dir_entry_btree.o dir_entry_btree_fakeftn.o dir_entry_btree_unittest.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@ -lstdc++

# unittest for logger.c

logger.o : $(USER_DIR)/logger.c $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CFLAGS) -c $(USER_DIR)/logger.c

logger_unittest.o : $(UNITTEST_DIR)/logger_unittest.cc \
                      $(USER_DIR)/logger.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(UNITTEST_DIR)/logger_unittest.cc

logger_unittest : logger.o logger_unittest.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@ -lstdc++


# unittest for pkg_cache.c
pkg_cache.o : $(USER_DIR)/pkg_cache.c $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CFLAGS) -c $(USER_DIR)/pkg_cache.c

pkg_cache_mock_ftn.o : $(UNITTEST_DIR)/pkg_cache_mock_ftn.c 
	$(CXX) $(CPPFLAGS) $(CFAKEFLAGS) -c $(UNITTEST_DIR)/pkg_cache_mock_ftn.c

pkg_cache_unittest.o : $(UNITTEST_DIR)/pkg_cache_unittest.cc \
                      $(USER_DIR)/pkg_cache.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(UNITTEST_DIR)/pkg_cache_unittest.cc

pkg_cache_unittest : pkg_cache.o pkg_cache_mock_ftn.o pkg_cache_unittest.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@ -lstdc++

# unittest for syncpoint_control.c
syncpoint_control.o : $(USER_DIR)/syncpoint_control.c $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CFLAGS) -c $(USER_DIR)/syncpoint_control.c

syncpoint_control_mock_ftn.o : $(UNITTEST_DIR)/syncpoint_control_mock_ftn.c 
	$(CXX) $(CPPFLAGS) $(CFAKEFLAGS) -c $(UNITTEST_DIR)/syncpoint_control_mock_ftn.c

syncpoint_control_unittest.o : $(UNITTEST_DIR)/syncpoint_control_unittest.cc \
                      $(USER_DIR)/syncpoint_control.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(UNITTEST_DIR)/syncpoint_control_unittest.cc

syncpoint_control_unittest : syncpoint_control.o syncpoint_control_mock_ftn.o syncpoint_control_unittest.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@ -lstdc++
