# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = ../../gtest-1.7.0

# Where to find user code.
USER_DIR = $(realpath ../../../../../src/HCFS)

# Location for unittest code
UNITTEST_DIR = $(realpath ./unittests)

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include -iquote$(USER_DIR) $(EXTRACPPFLAGS)

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread -fprofile-arcs -D_FILE_OFFSET_BITS=64

CXX = gcc

CFLAGS += -g -Wall -Wextra -pthread -fprofile-arcs -ftest-coverage -D_FILE_OFFSET_BITS=64

CFAKEFLAGS += -g -Wall -Wextra -pthread -fprofile-arcs -D_FILE_OFFSET_BITS=64

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = FS_manager_unittest mount_manager_unittest

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all : $(TESTS)

clean :
	rm -f $(TESTS) gtest.a gtest_main.a *.o *.gcda *.gcov *.gcno

test : $(TESTS)
	./FS_manager_unittest
	./mount_manager_unittest
	gcov *.gcno

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc -lstdc++

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc -lstdc++

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

# unittest for FS_manager.c

FS_manager.o : $(USER_DIR)/FS_manager.c $(USER_DIR)/FS_manager.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CFLAGS) -c $(USER_DIR)/FS_manager.c

FS_manager_fakeftn.o : $(UNITTEST_DIR)/FS_manager_fakeftn.c
	$(CXX) $(CPPFLAGS) $(CFAKEFLAGS) -c $(UNITTEST_DIR)/FS_manager_fakeftn.c

FS_manager_unittest.o : $(UNITTEST_DIR)/FS_manager_unittest.cc \
                     $(USER_DIR)/FS_manager.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(UNITTEST_DIR)/FS_manager_unittest.cc

FS_manager_unittest : FS_manager.o FS_manager_fakeftn.o FS_manager_unittest.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@ -lstdc++

# unittest for mount_manager.c

mount_manager.o : $(USER_DIR)/mount_manager.c $(USER_DIR)/mount_manager.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CFLAGS) -c $(USER_DIR)/mount_manager.c

mount_manager_fakeftn.o : $(UNITTEST_DIR)/mount_manager_fakeftn.c
	$(CXX) $(CPPFLAGS) $(CFAKEFLAGS) -c $(UNITTEST_DIR)/mount_manager_fakeftn.c

mount_manager_unittest.o : $(UNITTEST_DIR)/mount_manager_unittest.cc \
                     $(USER_DIR)/mount_manager.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(UNITTEST_DIR)/mount_manager_unittest.cc

mount_manager_unittest : mount_manager.o mount_manager_fakeftn.o mount_manager_unittest.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@ -lstdc++

