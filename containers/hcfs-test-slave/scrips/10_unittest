#!/bin/bash
#########################################################################
#
# Copyright Â© 2015-2016 Hope Bay Technologies, Inc. All rights reserved.
#
# Abstract:
#
# Revision History
#   2016/1/18 Jethro unified usage of workspace path
#
##########################################################################

echo -e "\n======== ${BASH_SOURCE[0]} ========"
repo="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && while [ ! -d .git ] ; do cd ..; done; pwd )"
here="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source $repo/utils/common_header.bash
cd $repo

sudo git clean -dxf
pwd
whoami
ls -la

srcdir=$repo/src/HCFS
testdir=$repo/tests

# Install dependencies
$repo/utils/setup_dev_env.sh -vm unit_test
# Speedup compiling
. $repo/utils/env_config.sh
sudo chown -R $USER:$USER $HOME/.ccache || :

set -x
# OCLint with Bear
function oclint_report()
{
	/usr/local/bin/bear make -j4 -C $srcdir
	/ci-tools/oclint-0.8.1/bin/oclint-json-compilation-database . \
		-- -report-type pmd -o $repo/oclint-report.xml || :
	sed -i "s@file name=\"@&src/HCFS/@g" $repo/oclint-report.xml
}

# PMD's Copy/Paste Detector (CPD)
function cpd_result()
{
	/ci-tools/pmd-bin-5.2.2/bin/run.sh cpd --minimum-tokens 100 --encoding UTF-8 --files $srcdir --format xml --language cpp \
		> $repo/cpd-result.xml || return_code=$?
	if [[ "$return_code" != "" && "$return_code" != 4 ]]; then
		echo pmd returns unknown error code $return_code
		false
	fi
	sed -i "s@$repo/@@g" $repo/cpd-result.xml
}

# Publish SLOCCount analysis results
function cloc_result()
{
	cloc --by-file --xml --out=$repo/cloc-result.xml $srcdir
	sed -i "s@$repo/@@g" $repo/cloc-result.xml
}

# Publish CCM analysis results (Cyclomatic Complexity)
function ccm_result()
{
	mono /ci-tools/CCM.exe $srcdir /xml > $repo/ccm-result.xml
	sed -i "s@<file>/@<file>src/HCFS/@g" $repo/ccm-result.xml
}

# Cehck code style
function hb_clint()
{
	find $srcdir -name "*.c" -or -name "*.cpp" | parallel --jobs 4 $testdir/code_checking/hb_clint.py {} \
		> $repo/hb_clint.xml 2>&1 || :
	sed -i "s@$repo/@@g" $repo/hb_clint.xml
}

# Cehck code style
function checkpatch()
{
	find $srcdir -name "*.c" -or -name "*.cpp" | parallel --jobs 4 $testdir/code_checking/checkpatch.pl --terse --no-tree --no-signoff -f {} || :
}

# Clang Scan-Build Results
function clang_scan_build()
{
	rm -rf ${repo}/clangScanBuildReports
	cd $srcdir
	make clean
	scan-build-3.5 -o ${repo}/clangScanBuildReports make -j4
}

# Run unit test
function unittest()
{
	cd $testdir/unit_test
	./run_unittests
	sed -i "s@$repo/@@g" $repo/tests/unit_test/c/unittest_modules/*/test_detail_*.xml
}

set +x
echo ==========================
echo Running oclint_report, clang_scan_build, cpd_result, cloc_result, ccm_result, hb_clint concurrently
echo ==========================
oclint_report    > /dev/null 2>&1 && \
clang_scan_build > /dev/null 2>&1 &
cpd_result       > /dev/null 2>&1 &
cloc_result      > /dev/null 2>&1 &
ccm_result       > /dev/null 2>&1 &
hb_clint         > /dev/null 2>&1 &
checkpatch
wait
unittest

# coverage.xml
#         Unit test coverage report
cd $testdir/unit_test
gcovr -x -r $srcdir . > $repo/coverage.xml
sed -i "s@$repo/@@g" $repo/coverage.xml
gcovr -r $srcdir .
