#!/bin/bash
#########################################################################
#
# Copyright Â© 2015-2016 Hope Bay Technologies, Inc. All rights reserved.
#
# Abstract:
#
# Revision History
#   2016/1/18 Jethro unified usage of workspace path
#
##########################################################################
if [ "$UID" -ne 0 ]; then exec sudo -E ${BASH_SOURCE[0]}; fi
echo -e "\n======== ${BASH_SOURCE[0]} ========"
repo="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && while [ ! -d utils ] ; do cd ..; done; pwd )"
source $repo/utils/common_header.bash

function main() {
	install_packages

	mkdir -p /ci-tools
	pushd /ci-tools
	install_oclint
	install_pmd
	install_ccm
	popd

	install_pyhcfs_deps

	setup_dev_env
	cleanup_ci_remains
}
function install_packages() {
	# use cache server to speed up docker building
	#if [ -e /.dockerinit ]; then
	#	echo 'Acquire::http::Proxy "http://cache:8000";' | tee /etc/apt/apt.conf.d/30autoproxy
	#fi
	#export http_proxy="http://cache:8000"
	sed -r -i"" "s/archive.ubuntu.com/10.0.1.5:8001/" /etc/apt/sources.list

	packages+=" cmake git build-essential"	# Required by oclint / bear
	packages+=" openjdk-7-jdk wget unzip"	# Required by PMD for CPD(duplicate code)
	packages+=" cloc"						# Install cloc for check code of line
	packages+=" mono-complete wget unzip"	# Required mono and CCM for complexity
	packages+=" clang-3.5"					# clang Scan Build Reports
	packages+=" colormake"					# colorful logs
	packages+=" parallel"					# parallel check source code style

	install_pkg
	apt-get clean
}

function install_oclint() {
	if [ ! -d Bear ]; then
		git clone --depth 1 https://github.com/rizsotto/Bear.git
		pushd Bear
		cmake .
		make all
		make install
		popd
	fi
	if [ ! -d oclint-0.8.1 ]; then
		http_proxy="http://10.0.1.5:8000" \
			wget http://archives.oclint.org/releases/0.8/oclint-0.8.1-x86_64-linux-3.13.0-35-generic.tar.gz
		tar -zxf oclint-0.8.1-x86_64-linux-3.13.0-35-generic.tar.gz
		rm -f oclint-0.8.1-x86_64-linux-3.13.0-35-generic.tar.gz
	fi
}

function install_pmd() {
	# Install PMD for CPD(duplicate code)
	if [ ! -d pmd-bin-5.2.2 ]; then
		wget http://downloads.sourceforge.net/project/pmd/pmd/5.2.2/pmd-bin-5.2.2.zip
		unzip pmd-bin-5.2.2.zip
		rm -f pmd-bin-5.2.2.zip
	fi
}

function install_ccm() {
	# Install mono and CCM for complexity
	if [ ! -f CCM.exe ]; then
		wget https://github.com/jonasblunck/ccm/releases/download/v1.1.7/ccm_binaries.zip
		unzip ccm_binaries.zip
		rm -f ccm_binaries.zip
	fi
}

function install_pyhcfs_deps() {
	pip install cffi
}

function setup_dev_env() {
	if [ -e /.dockerinit ]; then
		RUN_IN_SLAVE="sudo -E -u jenkins"
	fi
	$RUN_IN_SLAVE $repo/utils/setup_dev_env.sh -v -m docker_host
	$RUN_IN_SLAVE $repo/utils/setup_dev_env.sh -v -m functional_test
	$RUN_IN_SLAVE $repo/utils/setup_dev_env.sh -v -m unit_test
	$RUN_IN_SLAVE $repo/utils/install_ccache.bash
}
function cleanup_ci_remains() {
	# Remove files thail will fail tests
	pushd /tmp
	sudo -u jenkins fusermount -u -z test_fuse || :
	sudo rm -rf dir_* directory_creation FSmgr_upload here_is_obj markdelete \
		mock_* readdir_meta root_meta_path test* this_* tmp_dir_meta \
		tmp_meta_dir tmpdir tmpout to_delete_meta xattr_mock_meta || :
	popd
}

main
