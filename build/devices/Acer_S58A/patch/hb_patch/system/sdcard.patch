--- /system/core/sdcard/sdcard.c	2016-04-07 06:10:18.158363622 +0000
+++ sdcard.c	2016-04-07 06:36:16.000000000 +0000
@@ -44,6 +44,22 @@
 
 #include <private/android_filesystem_config.h>
 
+//HCFS include
+#include <errno.h>
+#include <sys/socket.h>
+#include <sys/un.h>
+#include "HCFSvol.h"
+
+#define ANDROID_INTERNAL 1
+#define ANDROID_EXTERNAL 2
+#define ANDROID_MULTIEXTERNAL 3
+
+#define MP_DEFAULT 1
+#define MP_READ 2
+#define MP_WRITE 3
+#define MP_IGNORE 4
+
+
 /* README
  *
  * What is this?
@@ -1771,7 +1787,7 @@
     snprintf(opts, sizeof(opts),
             "fd=%i,rootmode=40000,default_permissions,allow_other,user_id=%d,group_id=%d",
             fuse->fd, fuse->global->uid, fuse->global->gid);
-    if (mount("/dev/fuse", fuse->dest_path, "fuse", MS_NOSUID | MS_NODEV | MS_NOEXEC |
+    if (mount("/dev/fuse", fuse->dest_path, "fuse.sdcard", MS_NOSUID | MS_NODEV | MS_NOEXEC |
             MS_NOATIME, opts) != 0) {
         ERROR("failed to mount fuse filesystem: %s\n", strerror(errno));
         return -1;
@@ -1853,57 +1869,153 @@
 
     umask(0);
 
-    if (multi_user) {
-        /* Multi-user storage is fully isolated per user, so "other"
-         * permissions are completely masked off. */
-        if (fuse_setup(&fuse_default, AID_SDCARD_RW, 0006)
-                || fuse_setup(&fuse_read, AID_EVERYBODY, 0027)
-                || fuse_setup(&fuse_write, AID_EVERYBODY, full_write ? 0007 : 0027)) {
-            ERROR("failed to fuse_setup\n");
+    //Vince
+    //system("/system/bin/hcfs -oallow_other,big_writes &");
+    //sleep(5);
+
+    //check external mount point
+    int is_mount = 0;
+    is_mount = hcfsvol(10, "", MP_IGNORE);
+
+    if (is_mount < 0) {
+        //check volume
+        int retcode = hcfsvol(7, "", MP_IGNORE);
+        if (retcode < 0) {
+            //create volume
+            hcfsvol(4, "", MP_IGNORE);
+        }
+
+        //HCFS mount
+        hcfsvol(5, "/mnt/runtime/default/emulated", MP_DEFAULT);
+        hcfsvol(5, "/mnt/runtime/read/emulated", MP_READ);
+        hcfsvol(5, "/mnt/runtime/write/emulated", MP_WRITE);
+
+	// Aaron
+	system("restorecon /mnt/runtime/default/emulated");
+	system("restorecon /mnt/runtime/read/emulated");
+	system("restorecon /mnt/runtime/write/emulated");
+
+    } else {
+        if (multi_user) {
+            /* Multi-user storage is fully isolated per user, so "other"
+             * permissions are completely masked off. */
+            if (fuse_setup(&fuse_default, AID_SDCARD_RW, 0006)
+                    || fuse_setup(&fuse_read, AID_EVERYBODY, 0027)
+                    || fuse_setup(&fuse_write, AID_EVERYBODY, full_write ? 0007 : 0027)) {
+                ERROR("failed to fuse_setup\n");
+                exit(1);
+            }
+        } else {
+            /* Physical storage is readable by all users on device, but
+             * the Android directories are masked off to a single user
+             * deep inside attr_from_stat(). */
+            if (fuse_setup(&fuse_default, AID_SDCARD_RW, 0006)
+                    || fuse_setup(&fuse_read, AID_EVERYBODY, full_write ? 0027 : 0022)
+                    || fuse_setup(&fuse_write, AID_EVERYBODY, full_write ? 0007 : 0022)) {
+                ERROR("failed to fuse_setup\n");
+                exit(1);
+            }
+        }
+
+        /* Drop privs */
+        if (setgroups(sizeof(kGroups) / sizeof(kGroups[0]), kGroups) < 0) {
+            ERROR("cannot setgroups: %s\n", strerror(errno));
             exit(1);
         }
-    } else {
-        /* Physical storage is readable by all users on device, but
-         * the Android directories are masked off to a single user
-         * deep inside attr_from_stat(). */
-        if (fuse_setup(&fuse_default, AID_SDCARD_RW, 0006)
-                || fuse_setup(&fuse_read, AID_EVERYBODY, full_write ? 0027 : 0022)
-                || fuse_setup(&fuse_write, AID_EVERYBODY, full_write ? 0007 : 0022)) {
-            ERROR("failed to fuse_setup\n");
+        if (setgid(gid) < 0) {
+            ERROR("cannot setgid: %s\n", strerror(errno));
+            exit(1);
+        }
+        if (setuid(uid) < 0) {
+            ERROR("cannot setuid: %s\n", strerror(errno));
             exit(1);
         }
-    }
-
-    /* Drop privs */
-    if (setgroups(sizeof(kGroups) / sizeof(kGroups[0]), kGroups) < 0) {
-        ERROR("cannot setgroups: %s\n", strerror(errno));
-        exit(1);
-    }
-    if (setgid(gid) < 0) {
-        ERROR("cannot setgid: %s\n", strerror(errno));
-        exit(1);
-    }
-    if (setuid(uid) < 0) {
-        ERROR("cannot setuid: %s\n", strerror(errno));
-        exit(1);
-    }
 
-    if (multi_user) {
-        fs_prepare_dir(global.obb_path, 0775, uid, gid);
-    }
+        if (multi_user) {
+            fs_prepare_dir(global.obb_path, 0775, uid, gid);
+        }
 
-    if (pthread_create(&thread_default, NULL, start_handler, &handler_default)
-            || pthread_create(&thread_read, NULL, start_handler, &handler_read)
-            || pthread_create(&thread_write, NULL, start_handler, &handler_write)) {
-        ERROR("failed to pthread_create\n");
-        exit(1);
+        if (pthread_create(&thread_default, NULL, start_handler, &handler_default)
+                || pthread_create(&thread_read, NULL, start_handler, &handler_read)
+                || pthread_create(&thread_write, NULL, start_handler, &handler_write)) {
+            ERROR("failed to pthread_create\n");
+            exit(1);
+        }
     }
 
     watch_package_list(&global);
+
     ERROR("terminated prematurely\n");
     exit(1);
 }
 
+
+int hcfsvol(int code, char *mount_point, char vol_mode)
+{
+
+    int fd, size_msg, status, count, retcode, fsname_len;
+    unsigned int cmd_len, reply_len, total_recv, to_recv;
+    int total_entries;
+    struct sockaddr_un addr;
+    char buf[4096];
+    DIR_ENTRY *tmp;
+    char *ptr;
+    ino_t tmpino;
+    long long num_local, num_cloud, num_hybrid, retllcode;
+    long long downxfersize, upxfersize;
+    char shm_hcfs_reporter[] = "/dev/shm/hcfs_reporter";
+    int first_size, rest_size;
+
+    addr.sun_family = AF_UNIX;
+    strncpy(addr.sun_path, shm_hcfs_reporter, sizeof(addr.sun_path));
+    fd = socket(AF_UNIX, SOCK_STREAM, 0);
+    status = connect(fd, (const struct sockaddr *) &addr, sizeof(addr));
+
+    char vol_name[] = "hcfs_external";
+
+    if (code == 4) {
+        cmd_len = strlen(vol_name) + 2;
+        strncpy(buf, vol_name, sizeof(buf));
+        //buf[strlen(vol_name) + 1] = ANDROID_EXTERNAL;
+        buf[strlen(vol_name) + 1] = ANDROID_MULTIEXTERNAL;
+    }
+
+    else if (code == 5) {
+        cmd_len = strlen(vol_name) + strlen(mount_point) + 2 + sizeof(int) + sizeof(char);
+        fsname_len = strlen(vol_name) + 1;
+        buf[0] = vol_mode;
+
+        memcpy(buf + 1, &fsname_len, sizeof(int));
+        first_size = sizeof(int) + 1;
+        rest_size = sizeof(buf) - first_size;
+
+        snprintf(&(buf[first_size]), rest_size, "%s", vol_name);
+        snprintf(&(buf[first_size + fsname_len]), 4092 - fsname_len, "%s", mount_point);
+    }
+
+    else if (code == 7 || code == 10) {
+        cmd_len = strlen(vol_name) + 1;
+        strncpy(buf, vol_name, sizeof(buf));
+    }
+
+    size_msg = send(fd, &code, sizeof(unsigned int), 0);
+    size_msg = send(fd, &cmd_len, sizeof(unsigned int), 0);
+    size_msg = send(fd, buf, (cmd_len), 0);
+
+    size_msg = recv(fd, &reply_len, sizeof(unsigned int), 0);
+    size_msg = recv(fd, &retcode, sizeof(int), 0);
+    //if (retcode < 0)
+    //      printf("Command error: Code %d, %s\n", -retcode,
+    //      strerror(-retcode));
+    //    ERROR("Command error: Code %d, %s\n", -retcode,
+    //    strerror(-retcode));
+    //else
+    //    printf("Returned value is %d\n", retcode);
+
+    close(fd);
+    return retcode;
+}
+
 int main(int argc, char **argv) {
     const char *source_path = NULL;
     const char *label = NULL;
