--- /kernel/security/selinux/ss/services.c	2016-02-18 20:07:42.000000000 +0000
+++ services.c	2016-04-07 06:36:16.000000000 +0000
@@ -2493,22 +2493,60 @@
  * @behavior: labeling behavior
  * @sid: SID for filesystem (superblock)
  */
-int security_fs_use(
-	const char *fstype,
-	unsigned int *behavior,
-	u32 *sid)
+
+//int security_fs_use(struct super_block *sb, const char *fstype, unsigned int *behavior, u32 *sid)
+int security_fs_use(const char *fstype, const char *subtype, unsigned int *behavior, u32 *sid)
 {
 	int rc = 0;
 	struct ocontext *c;
 
+        // Vince
+        struct ocontext *base = NULL;
+        int baselen;
+        char *sub;
+
+        //printk("\n[security_trace] fstype: %s, subtype: %s\n", sb->s_type->name, sb->s_subtype);
 	read_lock(&policy_rwlock);
 
-	c = policydb.ocontexts[OCON_FSUSE];
-	while (c) {
-		if (strcmp(fstype, c->u.name) == 0)
-			break;
-		c = c->next;
-	}
+        // Vince -
+	//c = policydb.ocontexts[OCON_FSUSE];
+	//while (c) {
+	//	if (strcmp(fstype, c->u.name) == 0)
+	//		break;
+	//	c = c->next;
+	//}
+      
+        // Vince +
+        for (c = policydb.ocontexts[OCON_FSUSE]; c; c = c->next) {
+                if (strcmp(fstype, c->u.name) == 0) {
+			if (!subtype)
+				/* exact match, no subtype requested */
+				break;
+			/* save this for now, in case we do not find
+			   a subtype match */
+			base = c;
+		}
+		if (!subtype)
+			continue;
+		sub = strchr(c->u.name, '.');
+		if (!sub)
+			/* not an entry with subtype */
+			continue;
+		baselen = (sub - c->u.name);
+		if (strncmp(fstype, c->u.name, baselen) || fstype[baselen])
+			/* fstype does not match */
+			continue;
+		sub++; /* move past '.' */
+		if (strcmp(subtype, sub) == 0)
+			/* exact match of fstype AND subtype */
+ 			break;
+		c = c->next;	
+        }
+
+        if (!c)
+	    c = base;
+
+        // end        
 
 	if (c) {
 		*behavior = c->v.behavior;
